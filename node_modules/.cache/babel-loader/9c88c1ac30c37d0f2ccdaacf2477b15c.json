{"ast":null,"code":"import _classCallCheck from \"/Users/student/Desktop/My_dropbox-master/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/student/Desktop/My_dropbox-master/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll as _listAll, list as _list, getMetadata as _getMetadata, updateMetadata as _updateMetadata, getDownloadURL as _getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref as _ref2, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar UploadTaskSnapshotCompat = /*#__PURE__*/function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    _classCallCheck(this, UploadTaskSnapshotCompat);\n\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  _createClass(UploadTaskSnapshotCompat, [{\n    key: \"bytesTransferred\",\n    get: function get() {\n      return this._delegate.bytesTransferred;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._delegate.metadata;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._delegate.state;\n    }\n  }, {\n    key: \"totalBytes\",\n    get: function get() {\n      return this._delegate.totalBytes;\n    }\n  }]);\n\n  return UploadTaskSnapshotCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskCompat = /*#__PURE__*/function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    _classCallCheck(this, UploadTaskCompat);\n\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  _createClass(UploadTaskCompat, [{\n    key: \"snapshot\",\n    get: function get() {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    }\n  }, {\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      var _this = this;\n\n      return this._delegate.then(function (snapshot) {\n        if (onFulfilled) {\n          return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n        }\n      }, onRejected);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, nextOrObserver, error, completed) {\n      var _this2 = this;\n\n      var wrappedNextOrObserver = undefined;\n\n      if (!!nextOrObserver) {\n        if (typeof nextOrObserver === 'function') {\n          wrappedNextOrObserver = function wrappedNextOrObserver(taskSnapshot) {\n            return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n          };\n        } else {\n          wrappedNextOrObserver = {\n            next: !!nextOrObserver.next ? function (taskSnapshot) {\n              return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n            } : undefined,\n            complete: nextOrObserver.complete || undefined,\n            error: nextOrObserver.error || undefined\n          };\n        }\n      }\n\n      return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n    }\n  }]);\n\n  return UploadTaskCompat;\n}();\n\nvar ListResultCompat = /*#__PURE__*/function () {\n  function ListResultCompat(_delegate, _service) {\n    _classCallCheck(this, ListResultCompat);\n\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  _createClass(ListResultCompat, [{\n    key: \"prefixes\",\n    get: function get() {\n      var _this3 = this;\n\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this3._service);\n      });\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      var _this4 = this;\n\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this4._service);\n      });\n    }\n  }, {\n    key: \"nextPageToken\",\n    get: function get() {\n      return this._delegate.nextPageToken || null;\n    }\n  }]);\n\n  return ListResultCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ReferenceCompat = /*#__PURE__*/function () {\n  function ReferenceCompat(_delegate, storage) {\n    _classCallCheck(this, ReferenceCompat);\n\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  _createClass(ReferenceCompat, [{\n    key: \"name\",\n    get: function get() {\n      return this._delegate.name;\n    }\n  }, {\n    key: \"bucket\",\n    get: function get() {\n      return this._delegate.bucket;\n    }\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this._delegate.fullPath;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._delegate.toString();\n    }\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\n\n  }, {\n    key: \"child\",\n    value: function child(childPath) {\n      var reference = _getChild(this._delegate, childPath);\n\n      return new ReferenceCompat(reference, this.storage);\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    }\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var reference = this._delegate.parent;\n\n      if (reference == null) {\n        return null;\n      }\n\n      return new ReferenceCompat(reference, this.storage);\n    }\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(data, metadata) {\n      this._throwIfRoot('put');\n\n      return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n    }\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n\n  }, {\n    key: \"putString\",\n    value: function putString(value) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StringFormat.RAW;\n      var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n      this._throwIfRoot('putString');\n\n      var data = _dataFromString(format, value);\n\n      var metadataClone = Object.assign({}, metadata);\n\n      if (metadataClone['contentType'] == null && data.contentType != null) {\n        metadataClone['contentType'] = data.contentType;\n      }\n\n      return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n    }\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\n\n  }, {\n    key: \"listAll\",\n    value: function listAll() {\n      var _this5 = this;\n\n      return _listAll(this._delegate).then(function (r) {\n        return new ListResultCompat(r, _this5.storage);\n      });\n    }\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(options) {\n      var _this6 = this;\n\n      return _list(this._delegate, options || undefined).then(function (r) {\n        return new ListResultCompat(r, _this6.storage);\n      });\n    }\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      return _getMetadata(this._delegate);\n    }\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\n\n  }, {\n    key: \"updateMetadata\",\n    value: function updateMetadata(metadata) {\n      return _updateMetadata(this._delegate, metadata);\n    }\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\n\n  }, {\n    key: \"getDownloadURL\",\n    value: function getDownloadURL() {\n      return _getDownloadURL(this._delegate);\n    }\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      this._throwIfRoot('delete');\n\n      return deleteObject(this._delegate);\n    }\n  }, {\n    key: \"_throwIfRoot\",\n    value: function _throwIfRoot(name) {\n      if (this._delegate._location.path === '') {\n        throw _invalidRootOperation(name);\n      }\n    }\n  }]);\n\n  return ReferenceCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageServiceCompat = /*#__PURE__*/function () {\n  function StorageServiceCompat(app, _delegate) {\n    _classCallCheck(this, StorageServiceCompat);\n\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  _createClass(StorageServiceCompat, [{\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._delegate.maxOperationRetryTime;\n    }\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._delegate.maxUploadRetryTime;\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\n\n  }, {\n    key: \"ref\",\n    value: function ref(path) {\n      if (isUrl(path)) {\n        throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n      }\n\n      return new ReferenceCompat(_ref2(this._delegate, path), this);\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\n\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isUrl(url)) {\n        throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n      }\n\n      try {\n        _Location.makeFromUrl(url, this._delegate.host);\n      } catch (e) {\n        throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n      }\n\n      return new ReferenceCompat(_ref2(this._delegate, url), this);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      this._delegate.maxUploadRetryTime = time;\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      this._delegate.maxOperationRetryTime = time;\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      connectStorageEmulator(this._delegate, host, port, options);\n    }\n  }]);\n\n  return StorageServiceCompat;\n}();\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n\nvar name = \"@firebase/storage-compat\";\nvar version = \"0.1.17\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage-compat';\n\nfunction factory(container, _ref3) {\n  var url = _ref3.instanceIdentifier;\n  // Dependencies\n  var app = container.getProvider('app-compat').getImmediate();\n  var storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  var storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;;;;AAeG;;IAQUA,wB;EAGX,kCACWC,SADX,EAEWC,IAFX,EAGWC,GAHX,EAG+B;IAAA;;IAFpB,KAASF,SAAT;IACA,KAAIC,IAAJ;IACA,KAAGC,GAAH;EACP;;;;SAEJ,eAAoB;MAClB,OAAO,KAAKF,SAAL,CAAeG,gBAAtB;IACD;;;SACD,eAAY;MACV,OAAO,KAAKH,SAAL,CAAeI,QAAtB;IACD;;;SACD,eAAS;MACP,OAAO,KAAKJ,SAAL,CAAeK,KAAtB;IACD;;;SACD,eAAc;MACZ,OAAO,KAAKL,SAAL,CAAeM,UAAtB;IACD;;;;;AC3CH;;;;;;;;;;;;;;;AAeG;;;IAcUC,gB;EACX,0BACWP,SADX,EAEmBQ,IAFnB,EAEwC;IAAA;;IAD7B,KAASR,SAAT;IACQ,KAAIQ,IAAJ;IAWnB,cAAS,KAAKR,SAAL,CAAeS,MAAf,CAAsBC,IAAtB,CAA2B,KAAKV,SAAhC,CAAT;IACA,aAAQ,KAAKA,SAAL,CAAeW,KAAf,CAAqBD,IAArB,CAA0B,KAAKV,SAA/B,CAAR;IACA,aAAQ,KAAKA,SAAL,CAAeY,KAAf,CAAqBF,IAArB,CAA0B,KAAKV,SAA/B,CAAR;IACA,cAAS,KAAKA,SAAL,CAAea,MAAf,CAAsBH,IAAtB,CAA2B,KAAKV,SAAhC,CAAT;EAbI;;;;SAEJ,eAAY;MACV,OAAO,IAAID,wBAAJ,CACL,KAAKC,SAAL,CAAec,QADV,EAEL,IAFK,EAGL,KAAKN,IAHA,CAAP;IAKD;;;WAOD,cACEO,WADF,EAEEC,UAFF,EAEoD;MAAA;;MAElD,OAAO,KAAKhB,SAAL,CAAeiB,IAAf,CAAoB,kBAAQ,EAAG;QACpC,IAAIF,WAAJ,EAAiB;UACf,OAAOA,WAAW,CAChB,IAAIhB,wBAAJ,CAA6Be,QAA7B,EAAuC,KAAvC,EAA6C,KAAI,CAACN,IAAlD,CADgB,CAAlB;QAGD;MACF,CANM,EAMJQ,UANI,CAAP;IAOD;;;WAED,YACEE,IADF,EAEEC,cAFF,EAMEC,KANF,EAOEC,SAPF,EAO+B;MAAA;;MAE7B,IAAIC,qBAAqB,GAGkBC,SAH3C;;MAIA,IAAI,CAAC,CAACJ,cAAN,EAAsB;QACpB,IAAI,OAAOA,cAAP,KAA0B,UAA9B,EAA0C;UACxCG,qBAAqB,GAAG,+BAACE,YAAD;YAAA,OACtBL,cAAc,CACZ,IAAIpB,wBAAJ,CAA6ByB,YAA7B,EAA2C,MAA3C,EAAiD,MAAI,CAAChB,IAAtD,CADY,CADQ;UAAA,CAAxB;QAID,CALD,MAKO;UACLc,qBAAqB,GAAG;YACtBG,IAAI,EAAE,CAAC,CAACN,cAAc,CAACM,IAAjB,GACF,UAACD,YAAD;cAAA,OACEL,cAAc,CAACM,IAAf,CACE,IAAI1B,wBAAJ,CAA6ByB,YAA7B,EAA2C,MAA3C,EAAiD,MAAI,CAAChB,IAAtD,CADF,CADF;YAAA,CADE,GAKFe,SANkB;YAOtBG,QAAQ,EAAEP,cAAc,CAACO,QAAf,IAA2BH,SAPf;YAQtBH,KAAK,EAAED,cAAc,CAACC,KAAf,IAAwBG;UART,CAAxB;QAUD;MACF;;MACD,OAAO,KAAKvB,SAAL,CAAe2B,EAAf,CACLT,IADK,EAELI,qBAFK,EAGLF,KAAK,IAAIG,SAHJ,EAILF,SAAS,IAAIE,SAJR,CAAP;IAMD;;;;;;IC7EUK,gB;EACX,0BACW5B,SADX,EAEmB6B,QAFnB,EAEiD;IAAA;;IADtC,KAAS7B,SAAT;IACQ,KAAQ6B,QAAR;EACf;;;;SAEJ,eAAY;MAAA;;MACV,OAAO,KAAK7B,SAAL,CAAe8B,QAAf,CAAwBC,GAAxB,CACL,aAAG;QAAA,OAAI,IAAIC,eAAJ,CAAoB9B,GAApB,EAAyB,MAAI,CAAC2B,QAA9B,CAAJ;MAAA,CADE,CAAP;IAGD;;;SACD,eAAS;MAAA;;MACP,OAAO,KAAK7B,SAAL,CAAeiC,KAAf,CAAqBF,GAArB,CACL,aAAG;QAAA,OAAI,IAAIC,eAAJ,CAAoB9B,GAApB,EAAyB,MAAI,CAAC2B,QAA9B,CAAJ;MAAA,CADE,CAAP;IAGD;;;SACD,eAAiB;MACf,OAAO,KAAK7B,SAAL,CAAekC,aAAf,IAAgC,IAAvC;IACD;;;;;ACxCH;;;;;;;;;;;;;;;AAeG;;;IA+BUF,e;EAGX,yBACWhC,SADX,EAESmC,OAFT,EAEsC;IAAA;;IAD3B,KAASnC,SAAT;IACF,KAAOmC,OAAP;EACL;;;;SAEJ,eAAQ;MACN,OAAO,KAAKnC,SAAL,CAAeoC,IAAtB;IACD;;;SAED,eAAU;MACR,OAAO,KAAKpC,SAAL,CAAeqC,MAAtB;IACD;;;SAED,eAAY;MACV,OAAO,KAAKrC,SAAL,CAAesC,QAAtB;IACD;;;WAED,oBAAQ;MACN,OAAO,KAAKtC,SAAL,CAAeuC,QAAf,EAAP;IACD;IAED;;;;AAIG;;;;WACH,eAAMC,SAAN,EAAuB;MACrB,IAAMC,SAAS,GAAGC,SAAS,CAAC,KAAK1C,SAAN,EAAiBwC,SAAjB,CAA3B;;MACA,OAAO,IAAIR,eAAJ,CAAoBS,SAApB,EAA+B,KAAKN,OAApC,CAAP;IACD;;;SAED,eAAQ;MACN,OAAO,IAAIH,eAAJ,CAAoB,KAAKhC,SAAL,CAAe2C,IAAnC,EAAyC,KAAKR,OAA9C,CAAP;IACD;IAED;;;AAGG;;;;SACH,eAAU;MACR,IAAMM,SAAS,GAAG,KAAKzC,SAAL,CAAe4C,MAAjC;;MACA,IAAIH,SAAS,IAAI,IAAjB,EAAuB;QACrB,OAAO,IAAP;MACD;;MACD,OAAO,IAAIT,eAAJ,CAAoBS,SAApB,EAA+B,KAAKN,OAApC,CAAP;IACD;IAED;;;;;AAKG;;;;WACH,aACEU,IADF,EAEEzC,QAFF,EAE+B;MAE7B,KAAK0C,YAAL,CAAkB,KAAlB;;MACA,OAAO,IAAIvC,gBAAJ,CACLwC,oBAAoB,CAAC,KAAK/C,SAAN,EAAiB6C,IAAjB,EAAuBzC,QAAvB,CADf,EAEL,IAFK,CAAP;IAID;IAED;;;;;;AAMG;;;;WACH,mBACE4C,KADF,EAGiC;MAAA,IAD/BC,MAC+B,uEADRC,YAAY,CAACC,GACL;MAAA,IAA/B/C,QAA+B;;MAE/B,KAAK0C,YAAL,CAAkB,WAAlB;;MACA,IAAMD,IAAI,GAAGO,eAAe,CAACH,MAAD,EAASD,KAAT,CAA5B;;MACA,IAAMK,aAAa,qBAAQjD,QAAR,CAAnB;;MACA,IAAIiD,aAAa,CAAC,aAAD,CAAb,IAAgC,IAAhC,IAAwCR,IAAI,CAACS,WAAL,IAAoB,IAAhE,EAAsE;QACpED,aAAa,CAAC,aAAD,CAAb,GAA+BR,IAAI,CAACS,WAApC;MACD;;MACD,OAAO,IAAI/C,gBAAJ,CACL,IAAIgD,WAAJ,CACE,KAAKvD,SADP,EAEE,IAAIwD,QAAJ,CAAaX,IAAI,CAACA,IAAlB,EAAwB,IAAxB,CAFF,EAGEQ,aAHF,CADK,EAML,IANK,CAAP;IAQD;IAED;;;;;;;;;;;;;;;;AAgBG;;;;WACH,mBAAO;MAAA;;MACL,OAAOI,QAAO,CAAC,KAAKzD,SAAN,CAAP,CAAwBiB,IAAxB,CACL,WAAC;QAAA,OAAI,IAAIW,gBAAJ,CAAqB8B,CAArB,EAAwB,MAAI,CAACvB,OAA7B,CAAJ;MAAA,CADI,CAAP;IAGD;IAED;;;;;;;;;;;;;;;;;;AAkBG;;;;WACH,cAAKwB,OAAL,EAAuC;MAAA;;MACrC,OAAOC,KAAI,CAAC,KAAK5D,SAAN,EAAiB2D,OAAO,IAAIpC,SAA5B,CAAJ,CAA2CN,IAA3C,CACL,WAAC;QAAA,OAAI,IAAIW,gBAAJ,CAAqB8B,CAArB,EAAwB,MAAI,CAACvB,OAA7B,CAAJ;MAAA,CADI,CAAP;IAGD;IAED;;;;AAIG;;;;WACH,uBAAW;MACT,OAAO0B,YAAW,CAAC,KAAK7D,SAAN,CAAlB;IACD;IAED;;;;;;;;AAQG;;;;WACH,wBACEI,QADF,EACkC;MAEhC,OAAO0D,eAAc,CACnB,KAAK9D,SADc,EAEnBI,QAFmB,CAArB;IAID;IAED;;;AAGG;;;;WACH,0BAAc;MACZ,OAAO2D,eAAc,CAAC,KAAK/D,SAAN,CAArB;IACD;IAED;;;AAGG;;;;WACH,mBAAM;MACJ,KAAK8C,YAAL,CAAkB,QAAlB;;MACA,OAAOkB,YAAY,CAAC,KAAKhE,SAAN,CAAnB;IACD;;;WAEO,sBAAaoC,IAAb,EAAyB;MAC/B,IAAK,KAAKpC,SAAL,CAA8BiE,SAA9B,CAAwCC,IAAxC,KAAiD,EAAtD,EAA0D;QACxD,MAAMC,qBAAqB,CAAC/B,IAAD,CAA3B;MACD;IACF;;;;;AC7OH;;;;;;;;;;;;;;;AAeG;;AAgBH;;;AAGG;;;IACUgC,oB;EAGX,8BAAmBC,GAAnB,EAA8CrE,SAA9C,EAAwE;IAAA;;IAArD,KAAGqE,GAAH;IAA2B,KAASrE,SAAT;EAA8B;;;;SAE5E,eAAyB;MACvB,OAAO,KAAKA,SAAL,CAAesE,qBAAtB;IACD;;;SAED,eAAsB;MACpB,OAAO,KAAKtE,SAAL,CAAeuE,kBAAtB;IACD;IAED;;;AAGG;;;;WACH,aAAIL,IAAJ,EAAiB;MACf,IAAIM,KAAK,CAACN,IAAD,CAAT,EAAiB;QACf,MAAMO,gBAAgB,CACpB,oEADoB,CAAtB;MAGD;;MACD,OAAO,IAAIzC,eAAJ,CAAoB9B,KAAG,CAAC,KAAKF,SAAN,EAAiBkE,IAAjB,CAAvB,EAA+C,IAA/C,CAAP;IACD;IAED;;;AAGG;;;;WACH,oBAAWQ,GAAX,EAAsB;MACpB,IAAI,CAACF,KAAK,CAACE,GAAD,CAAV,EAAiB;QACf,MAAMD,gBAAgB,CACpB,2EADoB,CAAtB;MAGD;;MACD,IAAI;QACFE,SAAS,CAACC,WAAV,CAAsBF,GAAtB,EAA4B,KAAK1E,SAAL,CAAwC6E,IAApE;MACD,CAFD,CAEE,OAAOC,CAAP,EAAU;QACV,MAAML,gBAAgB,CACpB,gEADoB,CAAtB;MAGD;;MACD,OAAO,IAAIzC,eAAJ,CAAoB9B,KAAG,CAAC,KAAKF,SAAN,EAAiB0E,GAAjB,CAAvB,EAA8C,IAA9C,CAAP;IACD;;;WAED,+BAAsBK,IAAtB,EAAkC;MAChC,KAAK/E,SAAL,CAAeuE,kBAAf,GAAoCQ,IAApC;IACD;;;WAED,kCAAyBA,IAAzB,EAAqC;MACnC,KAAK/E,SAAL,CAAesE,qBAAf,GAAuCS,IAAvC;IACD;;;WAED,qBACEF,IADF,EAEEG,IAFF,EAKQ;MAAA,IAFNrB,OAEM,uEAAF,EAAE;MAENsB,sBAAsB,CAAC,KAAKjF,SAAN,EAAiB6E,IAAjB,EAAuBG,IAAvB,EAA6BrB,OAA7B,CAAtB;IACD;;;;;;AAGH,SAASa,KAAT,CAAeN,IAAf,EAA4B;EAC1B,OAAO,kBAAkBgB,IAAlB,CAAuBhB,IAAvB,CAAP;AACF;;;;ACtGA;;;;;;;;;;;;;;;AAeG;;AAuBH;;AAEG;;AACH,IAAMiB,YAAY,GAAG,gBAArB;;AAEA,SAASC,OAAT,CACEC,SADF,SAEqD;EAAA,IAA7BX,GAA6B,SAAjDY,kBAAiD;;EAGnD,IAAMjB,GAAG,GAAGgB,SAAS,CAACE,WAAV,CAAsB,YAAtB,EAAoCC,YAApC,EAAZ;EACA,IAAMC,UAAU,GAAGJ,SAAS,CACzBE,WADgB,CACJ,SADI,EAEhBC,YAFgB,CAEH;IAAEE,UAAU,EAAEhB;EAAd,CAFG,CAAnB;EAIA,IAAMiB,oBAAoB,GAAyB,IAAIvB,oBAAJ,CACjDC,GADiD,EAEjDoB,UAFiD,CAAnD;EAIA,OAAOE,oBAAP;AACD;;AAEK,SAAUC,eAAV,CAA0BC,QAA1B,EAAsD;EAC1D,IAAMC,gBAAgB,GAAG;;eAEvBC,UAFuB;eAGvBC,UAHuB;IAIvB9C,YAAY,EAAZA,YAJuB;IAKvB+C,OAAO,EAAE7B,oBALc;IAMvB8B,SAAS,EAAElE;EANY,CAAzB;EAQA6D,QAAQ,CAACM,QAAT,CAAkBC,iBAAlB,CACE,IAAIC,SAAJ,CAAclB,YAAd,EAA4BC,OAA5B,EAA0D;EAAA;EAA1D,EACGkB,eADH,CACmBR,gBADnB,EAEGS,oBAFH,CAEwB,IAFxB,CADF;EAMAV,QAAQ,CAACW,eAAT,CAAyBpE,IAAzB,EAA+BqE,OAA/B;AACD;;AAEDb,eAAe,CAACc,QAAD,CAAf","names":["UploadTaskSnapshotCompat","_delegate","task","ref","bytesTransferred","metadata","state","totalBytes","UploadTaskCompat","_ref","cancel","bind","catch","pause","resume","snapshot","onFulfilled","onRejected","then","type","nextOrObserver","error","completed","wrappedNextOrObserver","undefined","taskSnapshot","next","complete","on","ListResultCompat","_service","prefixes","map","ReferenceCompat","items","nextPageToken","storage","name","bucket","fullPath","toString","childPath","reference","_getChild","root","parent","data","_throwIfRoot","uploadBytesResumable","value","format","StringFormat","RAW","_dataFromString","metadataClone","contentType","_UploadTask","_FbsBlob","listAll","r","options","list","getMetadata","updateMetadata","getDownloadURL","deleteObject","_location","path","_invalidRootOperation","StorageServiceCompat","app","maxOperationRetryTime","maxUploadRetryTime","isUrl","_invalidArgument","url","_Location","makeFromUrl","host","e","time","port","connectStorageEmulator","test","STORAGE_TYPE","factory","container","instanceIdentifier","getProvider","getImmediate","storageExp","identifier","storageServiceCompat","registerStorage","instance","namespaceExports","TaskState","TaskEvent","Storage","Reference","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion","version","firebase"],"sources":["/Users/student/Desktop/My_dropbox-master/node_modules/@firebase/storage-compat/src/tasksnapshot.ts","/Users/student/Desktop/My_dropbox-master/node_modules/@firebase/storage-compat/src/task.ts","/Users/student/Desktop/My_dropbox-master/node_modules/@firebase/storage-compat/src/list.ts","/Users/student/Desktop/My_dropbox-master/node_modules/@firebase/storage-compat/src/reference.ts","/Users/student/Desktop/My_dropbox-master/node_modules/@firebase/storage-compat/src/service.ts","/Users/student/Desktop/My_dropbox-master/node_modules/@firebase/storage-compat/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: StorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}